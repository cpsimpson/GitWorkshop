---
title: "Git Cheatsheet (Lab Edition)"
format:
  pdf:
    papersize: letter
    geometry: margin=0.5in
    classoption: [twocolumn]     # ← two columns, no raw LaTeX needed
    fontsize: 9pt
    linestretch: 0.96
    colorlinks: false
    toc: false
    number-sections: false
    highlight-style: pygments
    code-overflow: wrap
    code-block-bg: false
    code-block-border-left: false
    header-includes:
    - |
      \usepackage{etoolbox}
      \AtBeginEnvironment{Verbatim}{\small}
mainfont: Helvetica
---


# Git Cheatsheet (Lab Edition)

## Setup
```bash
git config --global user.name "Your Name"
git config --global user.email "you@example.com"
```

## Starting a Repo
```bash
git init                # start a new repo
git clone URL           # copy an existing repo from GitHub
```

## Recording Changes
```bash
git status              # check what changed
git add FILE            # stage a file
git add .               # stage everything
git commit -m "Message" # commit staged changes
```

## Sending & Receiving Changes
```bash
git remote add origin URL   # link local repo to GitHub
git push -u origin main     # push changes to GitHub
git pull                    # fetch + merge updates from GitHub
```

## Branching
```bash
git branch new-feature   # create a branch
git checkout new-feature # switch to it
git merge new-feature    # merge into current branch
```

## Pull Requests (on GitHub)
- Share your branch on GitHub  
- Open a **Pull Request (PR)** to merge changes into `main`  
- Teammates can give feedback before merging  

## Code Review Tips
- Be **specific**: explain what’s unclear  
- Be **kind**: assume best intentions  
- Be **constructive**: suggest improvements, not just problems  

## Typical Workflow
1. **Pull** to get the latest changes  
2. Make edits locally  
3. `git add` → `git commit` → `git push`  
4. Open a **Pull Request** on GitHub  
5. Address feedback, then merge